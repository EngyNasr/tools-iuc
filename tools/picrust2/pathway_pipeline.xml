<tool id="picrust2_pathway_pipeline" name="PICRUSt2 Pathway abundance inference" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description></description>
    <expand macro="bio_tool"/>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <version_command>pathway_pipeline.py -v</version_command>
    <command detect_errors="exit_code"><![CDATA[
pathway_pipeline.py
    --input '$input'
    --out_dir 'pathway_output'
#if $map_file.selector == "custom"
    --map '$map_file.map'
#end if
    $skip_minpath
    $no_gap_fill
#if $intermediate_check
    --intermediate 'intermediate_out'
#end if
    -p "\${GALAXY_SLOTS:-1}"
    $no_regroup
#if $map_file_regroup.selector == "custom"
    --regroup_map '$map_file_regroup.id_map'
#end if
#if $strat_output.selector == "yes"
    $strat_output.per_sequence_contrib
    --per_sequence_function '$strat_output.per_sequence_function'
    --per_sequence_abun '$strat_output.per_sequence_abun'
    $strat_output.wide_table
    $strat_output.coverage
#else if $strat_output.selector == "no"
    $strat_output.coverage
    $strat_output.per_sequence_contrib
#end if
&&
cd ./pathway_output
&&
gunzip *tsv.gz
    ]]></command>
    <inputs>
        <param argument="--input" type="data" format="tabular" label="Input table with gene family abundances" help="Unstratified or stratified output of PICRUSt2 Metagenome prediction tool"/>
        <conditional name="map_file">
            <param name="selector" type="select" label="Mapping file">
                <option value="default" selected="true">Default mapping file (Maps MetaCyc reactions to prokaryotic MetaCyc pathways)</option>
                <option value="custom">Customized mapping file</option>
            </param>
            <when value="default">
            </when>
            <when value="custom">
                <param argument="--map" type="data" format="txt,tabular" label="Mapping of pathways to reactions"/>
            </when>
        </conditional>
        <param argument="--skip_minpath" type="boolean" truevalue="" falsevalue="--skip_minpath" checked="true" label="Run MinPath to identify which pathways are present as a first pass"/> 
        <param argument="--no_gap_fill" type="boolean" truevalue="" falsevalue="--no_gap_fill" checked="true" label="Perform gap filling before predicting pathway abundances"/> 
        <param argument="--no_regroup" type="boolean" truevalue="" falsevalue="--no_regroup" checked="true" label="Regroup input gene families to reactions as specified in the regrouping mapfile"/> 
        <conditional name="map_file_regroup">
            <param name="selector" type="select" label="Mapping file to regroup gene familied to">
                <option value="default" selected="true">Default mapping file (is for regrouping EC numbers to MetaCyc reactions)</option>
                <option value="custom">Customized mapping file</option>
            </param>
            <when value="default">
            </when>
            <when value="custom">
                <param argument="--regroup_map" type="data" format="tabular" label="Mapfile of ids to regroup gene families to before running MinPath"/>
            </when>
        </conditional>
        <conditional name="strat_output">
            <param name="selector" type="select" label="Calculate pathway abundances for each individual predicted genome?">
                <option value="yes">Yes</option>
                <option value="no" selected="true">No</option>
            </param>
            <when value="yes">
                <param argument="--per_sequence_contrib" type="boolean" truevalue="--per_sequence_contrib" falsevalue="" checked="true" label="Per sequence contrib: flag to specify that MinPath is run on the genes contributed by each sequence individually"/> 
                <param argument="--wide_table" type="boolean" truevalue="--wide_table" falsevalue="" checked="false" label="Flag to specify that wide-format stratified table should be output rather than metagenome contribution table"/> 
                <param argument="--per_sequence_abun" type="data" format="tabular" label="Table of sequence abundances across samples normalized by marker copy number" help="Typically the normalized sequence abundance table output at the metagenome pipeline step. This input is required when the per sequence contrib option is set."/>
                <param argument="--per_sequence_function" type="data" format="tabular" label="Table of function abundances per sequence, which was outputted at the hidden-state prediction step" help="This input is required when the per sequence contrib option is set. Note that this file should be the same input table as used for the metagenome pipeline step"/>
                <param argument="--coverage" type="boolean" truevalue="--coverage" falsevalue="" checked="true" label="Calculate pathway coverages as well as abundances"/> 
            </when>
            <when value="no">
                <param argument="--coverage" type="boolean" truevalue="--coverage" falsevalue="" checked="false" label="Calculate pathway coverages as well as abundances"/> 
                <param argument="--per_sequence_contrib" type="boolean" truevalue="--per_sequence_contrib" falsevalue="" checked="false" label="Per sequence contrib: flag to specify that MinPath is run on the genes contributed by each sequence individually"/> 
            </when>
        </conditional>
        <param argument="--intermediate_check" type="boolean" truevalue="intermediate_check" falsevalue="" checked="false" label="Keep intermediate files?" help="Intermediate output files will be deleted by default"/>
    </inputs>
    <outputs>
        <data name="path_abun_unstrat" format="tabular" from_work_dir="pathway_output/path_abun_unstrat.tsv" label="${tool.name} on ${on_string}: Pathway abundances"/>
        <data format="tabular" name="path_cov_unstrat" from_work_dir="pathway_output/path_cov_unstrat.tsv" label="${tool.name} on ${on_string}: Pathway coverage" >
            <filter>strat_output['coverage'] is True</filter>
        </data>
        <data format="tabular" name="path_abun_unstrat_per_seq" from_work_dir="pathway_output/path_abun_unstrat_per_seq.tsv" label="${tool.name} on ${on_string}: Pathway abundance unstratified per sequence" >
            <filter>strat_output['per_sequence_contrib'] is True</filter>
        </data>
        <data format="tabular" name="path_abun_predictions" from_work_dir="pathway_output/path_abun_predictions.tsv" label="${tool.name} on ${on_string}: Pathway abundance predictions" >
            <filter>strat_output['per_sequence_contrib'] is True</filter>
        </data>
        <data format="tabular" name="path_abun_contrib" from_work_dir="pathway_output/path_abun_contrib.tsv" label="${tool.name} on ${on_string}: Pathway abundance contributed" >
            <filter>strat_output['per_sequence_contrib'] is True</filter>
        </data>
        <collection name="intermediate_output_files" type="list" label="${tool.name} on ${on_string}: Intermediate files" >
            <discover_datasets pattern="(?P&lt;designation&gt;.+)" directory="intermediate_out/" format="tabular"/>
            <filter>intermediate_check is True</filter>
        </collection>
    </outputs>
    <tests>
    <test expect_num_outputs="1">
        <param name="input" ftype="tabular" value="pred_metagenome_unstrat.tsv.gz"/>
        <param name="skip_minpath" value="true"/>
        <param name="no_gap_fill" value="true"/>
        <param name="no_regroup" value="true"/>
        <param name="intermediate_check" value="false"/>
        <conditional name="map_file">
            <param name="selector" value="default"/>
        </conditional>
        <conditional name="strat_output">
            <param name="selector" value="no"/>
        </conditional>
        <output name="path_abun_unstrat" ftype="tabular">
            <assert_contents>
                <has_text text="pathway"/>
                <has_n_lines n="205"/>
            </assert_contents>
        </output>
    </test>
    <test expect_num_outputs="6">
        <param name="input" ftype="tabular" value="pred_metagenome_unstrat.tsv.gz"/>
        <param name="skip_minpath" value="true"/>
        <param name="no_gap_fill" value="true"/>
        <param name="no_regroup" value="true"/>
        <param name="intermediate_check" value="false"/>
        <conditional name="strat_output">
            <param name="selector" value="yes"/>
            <param name="per_sequence_contrib" value="true"/>
            <param name="wide_table" value="false"/>
            <param name="per_sequence_abun" ftype="tabular" value="seqtab_norm.tsv.gz"/>
            <param name="per_sequence_function" ftype="tabular" value="per_seq_func.tsv.gz"/>
            <param name="coverage" value="true"/>
        </conditional>
        <param name="intermediate_check" value="true"/>
        <output name="path_abun_unstrat" ftype="tabular">
            <assert_contents>
                <has_text text="pathway"/>
                <has_n_lines n="205"/>
            </assert_contents>
        </output>
        <output name="path_cov_unstrat" ftype="tabular">
            <assert_contents>
                <has_text text="100CHE6KO"/>
                <has_n_lines n="92"/>
            </assert_contents>
        </output>
        <output name="path_abun_unstrat_per_seq" ftype="tabular">
            <assert_contents>
                <has_text text="101CHE6WT"/>
                <has_n_lines n="3"/>
            </assert_contents>
        </output>
        <output name="path_abun_predictions" ftype="tabular">
            <assert_contents>
                <has_text text="PWY-5837"/>
                <has_n_lines n="3"/>
            </assert_contents>
        </output>
        <output name="path_abun_contrib" ftype="tabular">
            <assert_contents>
                <has_text text="taxon"/>
                <has_n_lines n="7"/>
            </assert_contents>
        </output>
        <output_collection name="intermediate_output_files" type="list">
            <element name="parsed_mapfile.tsv" ftype="tabular">
                <assert_contents>
                    <has_text text="METHYLENETHFDEHYDROG"/>
                    <has_n_lines n="575"/>                
                </assert_contents>
            </element>
            <element name="regrouped_infile.tsv" ftype="tabular">
                <assert_contents>
                    <has_text text="100CHE6KO"/>
                    <has_n_lines n="1790"/>  
                </assert_contents>
            </element>                                                                    
        </output_collection>
    </test>
    </tests>
    <help><![CDATA[
@HELP_HEADER@

Infer pathway abundances
========================
Infer the presence and abundances of pathways based on gene family abundances in a sample. By default, this script expects a table of E.C. number abundances (as output by PICRUSt2). However, alternative reaction to pathways mapping files can also be specified. By default, E.C. numbers are first regrouped to MetaCyc reactions, which are then linked to MetaCyc pathways through the default database.

Pathway abundances are calculated using the same approach as HUMAnN2 based on the abundances of gene families that can be linked to reactions within pathways (E.C. numbers regrouped to MetaCyc reactions be default). By default, pathways will first be identified as present or not with MinPath.

Either a structured or unstructured pathway mapfile can be input (the mapfile is structured by default), which will identify which set of pathways are likely present based on the presence of requisite gene families.

Note
====
Stratified output will only be output if a stratified metagenome is input (or if --per_sequence_contrib is set). Please note that by default stratified abundances are based on how much predicted genomes (e.g. sequences) contribute to the community-wide abundance, not the abundance of the pathway based on the predicted genes in that genome alone. In other words, a predicted genome might be contributing greatly to the community-wide pathway abundance simply because one required gene for that pathway is at extremely high abundance in that genome even though no other required genes for that pathway are present. In contrast, the --per_sequence_contrib option should be used to get the predicted abundance and coverage of each pathway based on the predicted gene families within each genome. Note that using the --per_sequence_contrib option can greatly increase runtime.

Input
=====
Input tabular table of gene family abundances (either the unstratified or stratified output of metagenome_pipeline.py).

Output
======
Pathway abundance.

    ]]></help> 
    <citations>
        <citation type="doi">10.1038/s41587-020-0548-6</citation>
    </citations>
</tool>